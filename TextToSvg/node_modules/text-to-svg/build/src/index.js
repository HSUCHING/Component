/**
 * Copyright (c) 2015 Hideki Shiro
 */

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var path = require('path');
var fs = require('fs');
var assert = require('assert');
var opentype = require('opentype.js');

var DEFAULT_FONT = path.join(__dirname, '../fonts/ipag.ttf');

function parseAnchorOption(anchor) {
  var horizontal = anchor.match(/left|center|right/gi) || [];
  horizontal = horizontal.length == 0 ? 'left' : horizontal[0];

  var vertical = anchor.match(/top|bottom|middle/gi) || [];
  vertical = vertical.length == 0 ? 'bottom' : vertical[0];

  return { horizontal: horizontal, vertical: vertical };
}

var TextToSVG = exports.TextToSVG = (function () {
  function TextToSVG() {
    var file = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_FONT : arguments[0];

    _classCallCheck(this, TextToSVG);

    this.font = opentype.loadSync(file);
  }

  _createClass(TextToSVG, [{
    key: 'getSize',
    value: function getSize(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var fontSize = options.fontSize || 72;
      var kerning = 'kerning' in options ? options.kerning : true;

      var fontScale = 1 / this.font.unitsPerEm * fontSize;

      var width = 0;
      var glyphs = this.font.stringToGlyphs(text);
      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];

        if (glyph.advanceWidth) {
          width += glyph.advanceWidth * fontScale;
        }

        if (kerning && i < glyphs.length - 1) {
          var kerningValue = this.font.getKerningValue(glyph, glyphs[i + 1]);
          width += kerningValue * fontScale;
        }
      }

      var height = (this.font.ascender + this.font.descender) * fontScale;

      return { width: width, height: height };
    }
  }, {
    key: 'getD',
    value: function getD(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var x = options.x || 0;
      var y = options.y || 0;
      var fontSize = options.fontSize || 72;
      var kerning = 'kerning' in options ? options.kerning : true;
      var anchor = parseAnchorOption(options.anchor || '');

      var size = this.getSize(text, { fontSize: fontSize, kerning: kerning });

      switch (anchor.horizontal) {
        case 'left':
          x -= 0;
          break;
        case 'center':
          x -= size.width / 2;
          break;
        case 'right':
          x -= size.width;
          break;
        default:
          throw new Error("Unknown anchor option: " + anchor.horizontal);
      }

      switch (anchor.vertical) {
        case 'top':
          y += size.height;
          break;
        case 'middle':
          y += size.height / 2;
          break;
        case 'bottom':
          y += 0;
          break;
        default:
          throw new Error("Unknown anchor option: " + anchor.vertical);
      }

      var path = this.font.getPath(text, x, y, fontSize, { kerning: kerning });

      return path.toPathData();
    }
  }, {
    key: 'getPath',
    value: function getPath(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      options.attributes = options.attributes || {};

      var attributes = Object.keys(options.attributes).map(function (key) {
        return key + '="' + options.attributes[key] + '"';
      }).join(' ');
      var d = this.getD(text, options);

      if (attributes) {
        return '<path ' + attributes + ' d="' + d + '"/>';
      } else {
        return '<path d="' + d + '"/>';
      }
    }
  }, {
    key: 'getSVG',
    value: function getSVG(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var svg = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
      svg += this.getPath(text, options);
      svg += '</svg>';

      return svg;
    }
  }]);

  return TextToSVG;
})();